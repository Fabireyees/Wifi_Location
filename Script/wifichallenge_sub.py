{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "import scipy as sp\n",
    "import datetime as dt\n",
    "import time\n",
    "import pickle \n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import Normalizer\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.utils import resample\n",
    "import statistics as st\n",
    "#estimators\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVR\n",
    "from sklearn import linear_model\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.preprocessing import scale\n",
    "#model metrics\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import cohen_kappa_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.svm import SVC\n",
    "#cross validation\n",
    "from sklearn.model_selection import train_test_split\n",
    "from math import sqrt\n",
    "import random\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.model_selection import learning_curve, validation_curve\n",
    "from sklearn.linear_model import LinearRegression, Lasso, Ridge\n",
    "from sklearn.kernel_ridge import KernelRidge\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.tree import ExtraTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\n",
    "from sklearn.multioutput import MultiOutputRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.model_selection import learning_curve, validation_curve\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.feature_selection import VarianceThreshold\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# %% loading Data SetÂ´s \n",
    "trainingPath= 'C:/Respaldo FR/UBIQUM/wifi/'\n",
    "import pandas as pd\n",
    "trainingData = pd.read_csv(trainingPath+ 'trainingData.csv')\n",
    "validationPath= 'C:/Respaldo FR/UBIQUM/wifi/'\n",
    "import pandas as pd\n",
    "validationData = pd.read_csv(validationPath+ 'validationData.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "TEST_DATAPath= 'C:/Respaldo FR/UBIQUM/wifi/'\n",
    "import pandas as pd\n",
    "TEST_DATA = pd.read_csv(TEST_DATAPath+ 'TEST_DATA.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "submissionPath= 'C:/Respaldo FR/UBIQUM/wifi/'\n",
    "import pandas as pd\n",
    "submission = pd.read_csv(submissionPath+ 'submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.concat([trainingData_val, validationData_val], axis=0)\n",
    "df=df.reset_index()\n",
    "df=df.drop(\"index\", axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5179, 529)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TEST_DATA.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5179, 4)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21048, 529)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainingData_val= trainingData.copy(deep=True) \n",
    "validationData_val= validationData.copy(deep=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Changing from log to lineal \n",
    "df.iloc[:,0:520] = np.where(df.iloc[:, 0:520] <= 0,\n",
    "                                     df.iloc[:, 0:520] + 105, \n",
    "                                    df.iloc[:, 0:520] - 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "swaps = []\n",
    "for i in df.iloc[:,0:520]:\n",
    "    swaps.append(sum(df[i])) \n",
    "    \n",
    "sumwaps_train = pd.DataFrame({'WAPS': [i for i in df.iloc[:,0:520]] , 'TOTAL': swaps})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAPS</th>\n",
       "      <th>TOTAL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [WAPS, TOTAL]\n",
       "Index: []"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_nosignal = np.where(sumwaps_train['TOTAL'] == 0)\n",
    "train_nosignal\n",
    "cerowapstrain = sumwaps_train.iloc[train_nosignal [0],:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'cerowapsvalidation' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-42-451dccec5329>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mdf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcerowapstrain\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;34m\"WAPS\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mn\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m520\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcerowapsvalidation\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mn\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'cerowapsvalidation' is not defined"
     ]
    }
   ],
   "source": [
    "df = df.drop(cerowapstrain [\"WAPS\"], axis=1)\n",
    "\n",
    "n = 520 - len(cerowapsvalidation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAP001</th>\n",
       "      <th>WAP002</th>\n",
       "      <th>WAP003</th>\n",
       "      <th>WAP004</th>\n",
       "      <th>WAP005</th>\n",
       "      <th>WAP006</th>\n",
       "      <th>WAP007</th>\n",
       "      <th>WAP008</th>\n",
       "      <th>WAP009</th>\n",
       "      <th>WAP010</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP520</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>FLOOR</th>\n",
       "      <th>BUILDINGID</th>\n",
       "      <th>SPACEID</th>\n",
       "      <th>RELATIVEPOSITION</th>\n",
       "      <th>USERID</th>\n",
       "      <th>PHONEID</th>\n",
       "      <th>TIMESTAMP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7541.264300</td>\n",
       "      <td>4.864921e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7536.621200</td>\n",
       "      <td>4.864934e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7519.152400</td>\n",
       "      <td>4.864950e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371714095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7524.570400</td>\n",
       "      <td>4.864934e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>102</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7632.143600</td>\n",
       "      <td>4.864982e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>122</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>1369909710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7317.344231</td>\n",
       "      <td>4.864796e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381156711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21044</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7313.731120</td>\n",
       "      <td>4.864792e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381156730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21045</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7637.535798</td>\n",
       "      <td>4.864903e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381247781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7636.654005</td>\n",
       "      <td>4.864905e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381247807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21047</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7637.944120</td>\n",
       "      <td>4.864904e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381247836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>21048 rows Ã 529 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       WAP001  WAP002  WAP003  WAP004  WAP005  WAP006  WAP007    WAP008  \\\n",
       "0         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "1         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "2         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.181818   \n",
       "3         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "4         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "...       ...     ...     ...     ...     ...     ...     ...       ...   \n",
       "21043     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "21044     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "21045     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "21046     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "21047     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "\n",
       "       WAP009  WAP010  ...  WAP520    LONGITUDE      LATITUDE  FLOOR  \\\n",
       "0         0.0     0.0  ...     0.0 -7541.264300  4.864921e+06      2   \n",
       "1         0.0     0.0  ...     0.0 -7536.621200  4.864934e+06      2   \n",
       "2         0.0     0.0  ...     0.0 -7519.152400  4.864950e+06      2   \n",
       "3         0.0     0.0  ...     0.0 -7524.570400  4.864934e+06      2   \n",
       "4         0.0     0.0  ...     0.0 -7632.143600  4.864982e+06      0   \n",
       "...       ...     ...  ...     ...          ...           ...    ...   \n",
       "21043     0.0     0.0  ...     0.0 -7317.344231  4.864796e+06      3   \n",
       "21044     0.0     0.0  ...     0.0 -7313.731120  4.864792e+06      3   \n",
       "21045     0.0     0.0  ...     0.0 -7637.535798  4.864903e+06      0   \n",
       "21046     0.0     0.0  ...     0.0 -7636.654005  4.864905e+06      0   \n",
       "21047     0.0     0.0  ...     0.0 -7637.944120  4.864904e+06      0   \n",
       "\n",
       "       BUILDINGID  SPACEID  RELATIVEPOSITION  USERID  PHONEID   TIMESTAMP  \n",
       "0               1      106                 2       2       23  1371713733  \n",
       "1               1      106                 2       2       23  1371713691  \n",
       "2               1      103                 2       2       23  1371714095  \n",
       "3               1      102                 2       2       23  1371713807  \n",
       "4               0      122                 2      11       13  1369909710  \n",
       "...           ...      ...               ...     ...      ...         ...  \n",
       "21043           2        0                 0       0       13  1381156711  \n",
       "21044           2        0                 0       0       13  1381156730  \n",
       "21045           0        0                 0       0       13  1381247781  \n",
       "21046           0        0                 0       0       13  1381247807  \n",
       "21047           0        0                 0       0       13  1381247836  \n",
       "\n",
       "[21048 rows x 529 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stand = MinMaxScaler().fit(df.iloc[:,0:520].transpose())\n",
    "df_val = stand.transform(df.iloc[:,0:520].transpose())\n",
    "df_val = pd.DataFrame(np.transpose(df_val))\n",
    "df[df.columns[0:520]] = df_val\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAP001</th>\n",
       "      <th>WAP002</th>\n",
       "      <th>WAP005</th>\n",
       "      <th>WAP006</th>\n",
       "      <th>WAP007</th>\n",
       "      <th>WAP008</th>\n",
       "      <th>WAP009</th>\n",
       "      <th>WAP010</th>\n",
       "      <th>WAP011</th>\n",
       "      <th>WAP012</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP519</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>FLOOR</th>\n",
       "      <th>BUILDINGID</th>\n",
       "      <th>SPACEID</th>\n",
       "      <th>RELATIVEPOSITION</th>\n",
       "      <th>USERID</th>\n",
       "      <th>PHONEID</th>\n",
       "      <th>TIMESTAMP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7541.2643</td>\n",
       "      <td>4.864921e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7536.6212</td>\n",
       "      <td>4.864934e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7519.1524</td>\n",
       "      <td>4.864950e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371714095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7524.5704</td>\n",
       "      <td>4.864934e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>102</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7632.1436</td>\n",
       "      <td>4.864982e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>122</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>1369909710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19932</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7485.4686</td>\n",
       "      <td>4.864875e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>10</td>\n",
       "      <td>1371710683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19933</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7390.6206</td>\n",
       "      <td>4.864836e+06</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>140</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>10</td>\n",
       "      <td>1371710402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19934</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7516.8415</td>\n",
       "      <td>4.864889e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>10</td>\n",
       "      <td>1371710921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19935</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7537.3219</td>\n",
       "      <td>4.864896e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>113</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>10</td>\n",
       "      <td>1371711049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19936</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-7536.1658</td>\n",
       "      <td>4.864898e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>112</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>10</td>\n",
       "      <td>1371711025</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>19937 rows Ã 474 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       WAP001  WAP002  WAP005  WAP006  WAP007    WAP008  WAP009  WAP010  \\\n",
       "0         0.0     0.0     0.0     0.0     0.0  0.000000     0.0     0.0   \n",
       "1         0.0     0.0     0.0     0.0     0.0  0.000000     0.0     0.0   \n",
       "2         0.0     0.0     0.0     0.0     0.0  0.181818     0.0     0.0   \n",
       "3         0.0     0.0     0.0     0.0     0.0  0.000000     0.0     0.0   \n",
       "4         0.0     0.0     0.0     0.0     0.0  0.000000     0.0     0.0   \n",
       "...       ...     ...     ...     ...     ...       ...     ...     ...   \n",
       "19932     0.0     0.0     0.0     0.0     0.0  0.000000     0.0     0.0   \n",
       "19933     0.0     0.0     0.0     0.0     0.0  0.000000     0.0     0.0   \n",
       "19934     0.0     0.0     0.0     0.0     0.0  0.000000     0.0     0.0   \n",
       "19935     0.0     0.0     0.0     0.0     0.0  0.000000     0.0     0.0   \n",
       "19936     0.0     0.0     0.0     0.0     0.0  0.000000     0.0     0.0   \n",
       "\n",
       "       WAP011  WAP012  ...  WAP519  LONGITUDE      LATITUDE  FLOOR  \\\n",
       "0         0.0     0.0  ...       0 -7541.2643  4.864921e+06      2   \n",
       "1         0.0     0.0  ...       0 -7536.6212  4.864934e+06      2   \n",
       "2         0.0     0.0  ...       0 -7519.1524  4.864950e+06      2   \n",
       "3         0.0     0.0  ...       0 -7524.5704  4.864934e+06      2   \n",
       "4         0.0     0.0  ...       0 -7632.1436  4.864982e+06      0   \n",
       "...       ...     ...  ...     ...        ...           ...    ...   \n",
       "19932     0.0     0.0  ...       0 -7485.4686  4.864875e+06      3   \n",
       "19933     0.0     0.0  ...       0 -7390.6206  4.864836e+06      1   \n",
       "19934     0.0     0.0  ...       0 -7516.8415  4.864889e+06      3   \n",
       "19935     0.0     0.0  ...       0 -7537.3219  4.864896e+06      3   \n",
       "19936     0.0     0.0  ...       0 -7536.1658  4.864898e+06      3   \n",
       "\n",
       "       BUILDINGID  SPACEID  RELATIVEPOSITION  USERID  PHONEID   TIMESTAMP  \n",
       "0               1      106                 2       2       23  1371713733  \n",
       "1               1      106                 2       2       23  1371713691  \n",
       "2               1      103                 2       2       23  1371714095  \n",
       "3               1      102                 2       2       23  1371713807  \n",
       "4               0      122                 2      11       13  1369909710  \n",
       "...           ...      ...               ...     ...      ...         ...  \n",
       "19932           1        1                 2      18       10  1371710683  \n",
       "19933           2      140                 2      18       10  1371710402  \n",
       "19934           1       13                 2      18       10  1371710921  \n",
       "19935           1      113                 2      18       10  1371711049  \n",
       "19936           1      112                 2      18       10  1371711025  \n",
       "\n",
       "[19937 rows x 474 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stand = MinMaxScaler().fit(trainingData.iloc[:,0:n].transpose())\n",
    "df_test = stand.transform(trainingData.iloc[:,0:n].transpose())\n",
    "df_test = pd.DataFrame(np.transpose(df_test))\n",
    "trainingData[trainingData.columns[0:n]] = df_test\n",
    "trainingData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Spliting the data set \n",
    "df_test_columns = df.columns[0:520]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['WAP001', 'WAP002', 'WAP003', 'WAP004', 'WAP005', 'WAP006', 'WAP007',\n",
       "       'WAP008', 'WAP009', 'WAP010',\n",
       "       ...\n",
       "       'WAP511', 'WAP512', 'WAP513', 'WAP514', 'WAP515', 'WAP516', 'WAP517',\n",
       "       'WAP518', 'WAP519', 'WAP520'],\n",
       "      dtype='object', length=520)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "display(df.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df.drop([\"SPACEID\",\"RELATIVEPOSITION\"], axis=1)\n",
    "df= df.drop_duplicates() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20137, 527)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicated waps in training set: 0\n"
     ]
    }
   ],
   "source": [
    "df = df.drop_duplicates(df_test_columns, keep=False)\n",
    "dfduplicated = df.iloc[:, 0:520].duplicated(keep=False)\n",
    "print(\"Duplicated waps in training set: %d\" %sum(dfduplicated))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAP001</th>\n",
       "      <th>WAP002</th>\n",
       "      <th>WAP003</th>\n",
       "      <th>WAP004</th>\n",
       "      <th>WAP005</th>\n",
       "      <th>WAP006</th>\n",
       "      <th>WAP007</th>\n",
       "      <th>WAP008</th>\n",
       "      <th>WAP009</th>\n",
       "      <th>WAP010</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP511</th>\n",
       "      <th>WAP512</th>\n",
       "      <th>WAP513</th>\n",
       "      <th>WAP514</th>\n",
       "      <th>WAP515</th>\n",
       "      <th>WAP516</th>\n",
       "      <th>WAP517</th>\n",
       "      <th>WAP518</th>\n",
       "      <th>WAP519</th>\n",
       "      <th>WAP520</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21044</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21045</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21047</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20137 rows Ã 520 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       WAP001  WAP002  WAP003  WAP004  WAP005  WAP006  WAP007    WAP008  \\\n",
       "0         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "1         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "2         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.181818   \n",
       "3         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "5         0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "...       ...     ...     ...     ...     ...     ...     ...       ...   \n",
       "21043     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "21044     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "21045     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "21046     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "21047     0.0     0.0     0.0     0.0     0.0     0.0     0.0  0.000000   \n",
       "\n",
       "       WAP009  WAP010  ...  WAP511  WAP512  WAP513  WAP514  WAP515  WAP516  \\\n",
       "0         0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "1         0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "2         0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "3         0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "5         0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "...       ...     ...  ...     ...     ...     ...     ...     ...     ...   \n",
       "21043     0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "21044     0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "21045     0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "21046     0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "21047     0.0     0.0  ...     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "\n",
       "       WAP517  WAP518  WAP519  WAP520  \n",
       "0         0.0     0.0     0.0     0.0  \n",
       "1         0.0     0.0     0.0     0.0  \n",
       "2         0.0     0.0     0.0     0.0  \n",
       "3         0.0     0.0     0.0     0.0  \n",
       "5         0.0     0.0     0.0     0.0  \n",
       "...       ...     ...     ...     ...  \n",
       "21043     0.0     0.0     0.0     0.0  \n",
       "21044     0.0     0.0     0.0     0.0  \n",
       "21045     0.0     0.0     0.0     0.0  \n",
       "21046     0.0     0.0     0.0     0.0  \n",
       "21047     0.0     0.0     0.0     0.0  \n",
       "\n",
       "[20137 rows x 520 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "onlyWap=df.iloc[:,0:520]\n",
    "display(onlyWap)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20137, 82)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "onlyWap=df.iloc[:,0:520]\n",
    "def variance_threshold_select(df,thresh =0.03):\n",
    "    df1 = df.copy(deep=True) # Make a deep copy of the dataframe\n",
    "    selector = VarianceThreshold(thresh)\n",
    "    selector.fit(df1)\n",
    "    df2 = df.loc[:,selector.get_support(indices=False)]\n",
    "    return df2\n",
    "onlyWap=variance_threshold_select(onlyWap)\n",
    "onlyInfo=df.iloc[:,-9:]\n",
    "finalTraining=pd.concat([onlyWap,onlyInfo],axis=1)\n",
    "finalTraining.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAP011</th>\n",
       "      <th>WAP012</th>\n",
       "      <th>WAP013</th>\n",
       "      <th>WAP014</th>\n",
       "      <th>WAP029</th>\n",
       "      <th>WAP030</th>\n",
       "      <th>WAP033</th>\n",
       "      <th>WAP034</th>\n",
       "      <th>WAP035</th>\n",
       "      <th>WAP036</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP517</th>\n",
       "      <th>WAP519</th>\n",
       "      <th>WAP520</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>FLOOR</th>\n",
       "      <th>BUILDINGID</th>\n",
       "      <th>USERID</th>\n",
       "      <th>PHONEID</th>\n",
       "      <th>TIMESTAMP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7541.264300</td>\n",
       "      <td>4.864921e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7536.621200</td>\n",
       "      <td>4.864934e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7519.152400</td>\n",
       "      <td>4.864950e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371714095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7524.570400</td>\n",
       "      <td>4.864934e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7533.896200</td>\n",
       "      <td>4.864939e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7317.344231</td>\n",
       "      <td>4.864796e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381156711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21044</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7313.731120</td>\n",
       "      <td>4.864792e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381156730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21045</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.192982</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7637.535798</td>\n",
       "      <td>4.864903e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381247781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.170213</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.170213</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7636.654005</td>\n",
       "      <td>4.864905e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381247807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21047</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.318182</td>\n",
       "      <td>0.295455</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-7637.944120</td>\n",
       "      <td>4.864904e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381247836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20137 rows Ã 82 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       WAP011  WAP012  WAP013    WAP014    WAP029    WAP030  WAP033  WAP034  \\\n",
       "0         0.0     0.0     0.0  0.000000  0.000000  0.000000     0.0     0.0   \n",
       "1         0.0     0.0     0.0  0.000000  0.000000  0.000000     0.0     0.0   \n",
       "2         0.0     0.0     0.0  0.000000  0.000000  0.000000     0.0     0.0   \n",
       "3         0.0     0.0     0.0  0.000000  0.000000  0.000000     0.0     0.0   \n",
       "5         0.0     0.0     0.0  0.000000  0.000000  0.000000     0.0     0.0   \n",
       "...       ...     ...     ...       ...       ...       ...     ...     ...   \n",
       "21043     0.0     0.0     0.0  0.000000  0.000000  0.000000     0.0     0.0   \n",
       "21044     0.0     0.0     0.0  0.000000  0.000000  0.000000     0.0     0.0   \n",
       "21045     0.0     0.0     0.0  0.000000  0.192982  0.000000     0.0     0.0   \n",
       "21046     0.0     0.0     0.0  0.170213  0.000000  0.170213     0.0     0.0   \n",
       "21047     0.0     0.0     0.0  0.000000  0.318182  0.295455     0.0     0.0   \n",
       "\n",
       "       WAP035  WAP036  ...  WAP517  WAP519  WAP520    LONGITUDE      LATITUDE  \\\n",
       "0        0.00     0.0  ...     0.0     0.0     0.0 -7541.264300  4.864921e+06   \n",
       "1        0.00     0.0  ...     0.0     0.0     0.0 -7536.621200  4.864934e+06   \n",
       "2        0.00     0.0  ...     0.0     0.0     0.0 -7519.152400  4.864950e+06   \n",
       "3        0.26     0.0  ...     0.0     0.0     0.0 -7524.570400  4.864934e+06   \n",
       "5        0.00     0.0  ...     0.0     0.0     0.0 -7533.896200  4.864939e+06   \n",
       "...       ...     ...  ...     ...     ...     ...          ...           ...   \n",
       "21043    0.00     0.0  ...     0.0     0.0     0.0 -7317.344231  4.864796e+06   \n",
       "21044    0.00     0.0  ...     0.0     0.0     0.0 -7313.731120  4.864792e+06   \n",
       "21045    0.00     0.0  ...     0.0     0.0     0.0 -7637.535798  4.864903e+06   \n",
       "21046    0.00     0.0  ...     0.0     0.0     0.0 -7636.654005  4.864905e+06   \n",
       "21047    0.00     0.0  ...     0.0     0.0     0.0 -7637.944120  4.864904e+06   \n",
       "\n",
       "       FLOOR  BUILDINGID  USERID  PHONEID   TIMESTAMP  \n",
       "0          2           1       2       23  1371713733  \n",
       "1          2           1       2       23  1371713691  \n",
       "2          2           1       2       23  1371714095  \n",
       "3          2           1       2       23  1371713807  \n",
       "5          2           1       2       23  1371713841  \n",
       "...      ...         ...     ...      ...         ...  \n",
       "21043      3           2       0       13  1381156711  \n",
       "21044      3           2       0       13  1381156730  \n",
       "21045      0           0       0       13  1381247781  \n",
       "21046      0           0       0       13  1381247807  \n",
       "21047      0           0       0       13  1381247836  \n",
       "\n",
       "[20137 rows x 82 columns]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finalTraining"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1f9801b9f88>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWoAAAD4CAYAAADFAawfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAARNElEQVR4nO3df4zkd13H8eebayttF45i6wQOZDFAI3BSuBH5EXGXH1o4xJiQUAJIEbOJChatxjNoiCbERj0SLPzBRRCVwqKltYSTHwVZG0yL7pbSbXv8ajmgV7wTDw62XIDTt3/s7HV3mdn57s58Zj7sPR/JpLPz/Xxn3u/vZ/ra2e98v/eNzESSVK8HjbsASdLGDGpJqpxBLUmVM6glqXIGtSRV7qwST3rhhRfm5ORkiac+7f777+f8888v+ho1OBP6PBN6BPvcTkr0uLCw8I3MvKjbsiJBPTk5yfz8fImnPm1ubo6pqamir1GDM6HPM6FHsM/tpESPEfGVXsvc9SFJlTOoJalyBrUkVc6glqTKGdSSVDmDWpIq1yioI+J3I+LOiLgjIt4XEQ8uXZgkaVnfoI6IXcDvAO3MfDKwA7isdGGSpGVNd32cBZwbEWcB5wH3lStJkrRaNLlwQERcAbwZOAl8LDNf0WXMDDAD0Gq19szOzg651LWWlpaYmJgo+ho1OHb8BEdP9l6+e9fO0RVTyJkyl/a5fZTocXp6eiEz292W9Q3qiLgA+ADwMuBbwD8B12bme3qt026301PIh+Pqa25g/2LvM/0PX7V3hNWUcabMpX1uH4VOIe8Z1E12fTwf+HJm/ndm/gC4DnjWMAuUJPXWJKi/CjwjIs6LiACeBxwqW5YkaUXfoM7MTwPXArcCi511DhSuS5LU0eifOc3MNwFvKlyLJKkLz0yUpMoZ1JJUOYNakipnUEtS5QxqSaqcQS1JlTOoJalyBrUkVc6glqTKGdSSVDmDWpIqZ1BLUuUMakmqnEEtSZUzqCWpcga1JFWub1BHxMURcduq27cj4g2jKE6S1OAKL5n5eeASgIjYARwBri9clySpY7O7Pp4H3J2ZXylRjCTph202qC8D3leiEElSd5GZzQZGnAPcBzwpM492WT4DzAC0Wq09s7Ozw6zzhywtLTExMVH0NWpw7PgJjp7svXz3rp2jK6aQM2Uu7XP7KNHj9PT0Qma2uy1rdBXyjhcCt3YLaYDMPAAcAGi32zk1NbXZOjdlbm6O0q9Rg6uvuYH9i72n6fArpkZXTCFnylza5/Yx6h43s+vj5bjbQ5JGrlFQR8R5wAuA68qWI0lar9Guj8z8LvDjhWuRJHXhmYmSVDmDWpIqZ1BLUuUMakmqnEEtSZUzqCWpcga1JFXOoJakyhnUklQ5g1qSKmdQS1LlDGpJqpxBLUmVM6glqXIGtSRVzqCWpMoZ1JJUuaaX4npYRFwbEZ+LiEMR8czShUmSljW9CvlbgY9k5ksj4hzgvII1SZJW6RvUEfFQ4DnA5QCZ+X3g+2XLkiStiMzceEDEJcAB4C7gKcACcEVm3r9u3AwwA9BqtfbMzs4WKXjF0tISExMTax5bPHJiw3V279pZsqQijh0/wdGTvZf/KPa0Xre53I7sc/so0eP09PRCZra7LWsS1G3gFuDZmfnpiHgr8O3M/JNe67Tb7Zyfnx+k5r7m5uaYmppa89jkvoMbrnP4qr0FKyrj6mtuYP9i7z98fhR7Wq/bXG5H9rl9lOgxInoGdZMvE+8F7s3MT3d+vhZ42rCKkyRtrG9QZ+Z/AV+LiIs7Dz2P5d0gkqQRaHrUx+uBazpHfNwDvKZcSZKk1RoFdWbeBnTddyJJKsszEyWpcga1JFXOoJakyhnUklQ5g1qSKmdQS1LlDGpJqpxBLUmVM6glqXIGtSRVzqCWpMoZ1JJUOYNakipnUEtS5QxqSaqcQS1JlTOoJalyja7wEhGHge8A/wuc6nWlXEnS8DW9ZiLAdGZ+o1glkqSu3PUhSZWLzOw/KOLLwDeBBN6RmQe6jJkBZgBardae2dnZIZe61tLSEhMTE2seWzxyYsN1du/aWbKkIo4dP8HRk72Xj6unYW7rbnO5Hdnn9lGix+np6YVeu5WbBvUjM/O+iPgJ4Ebg9Zl5U6/x7XY75+fnt1xwE3Nzc0xNTa15bHLfwQ3XOXzV3oIVlXH1NTewf7H3Hqpx9TTMbd1tLrcj+9w+SvQYET2DutGuj8y8r/PfY8D1wNOHV54kaSN9gzoizo+Ih6zcB34RuKN0YZKkZU2O+mgB10fEyvj3ZuZHilYlSTqtb1Bn5j3AU0ZQiySpCw/Pk6TKGdSSVDmDWpIqZ1BLUuUMakmqnEEtSZUzqCWpcga1JFXOoJakyhnUklQ5g1qSKmdQS1LlDGpJqpxBLUmVM6glqXIGtSRVzqCWpMo1DuqI2BERn4mID5UsSJK01mY+UV8BHCpViCSpu0ZBHRGPAvYCf1O2HEnSepGZ/QdFXAv8OfAQ4Pcz88VdxswAMwCtVmvP7OzskEtda2lpiYmJiTWPLR45seE6u3ftLFlSEceOn+Doyd7Lx9XToNt69fqtc9mwx82oeY67vWdXbKf37kZ9bhclepyenl7IzHa3ZX2vQh4RLwaOZeZCREz1GpeZB4ADAO12O6emeg4dirm5Oda/xuX7Dm64zuFXTG24vEZXX3MD+xd7T9O4ehp0W69e/8rdpzbscTNqnuNu79kV2+m9u1Gf28Woe2yy6+PZwEsi4jAwCzw3It5TtCpJ0ml9gzoz/ygzH5WZk8BlwL9m5iuLVyZJAjyOWpKqt6kdg5k5B8wVqUSS1JWfqCWpcga1JFXOoJakyhnUklQ5g1qSKmdQS1LlDGpJqpxBLUmVM6glqXIGtSRVzqCWpMoZ1JJUOYNakipnUEtS5QxqSaqcQS1JlTOoJalyfYM6Ih4cEf8REZ+NiDsj4k9HUZgkaVmTS3F9D3huZi5FxNnApyLiw5l5S+HaJEk0COrMTGCp8+PZnVuWLEqS9IBYzuE+gyJ2AAvA44C3Z+YfdhkzA8wAtFqtPbOzs0Muda2lpSUmJibWPLZ45ESx19u9a2fPZf1ed6N1+63fOheOntz6c5cyzJ779ThM49pe0P09u2LQ7VmTjfrcLkr0OD09vZCZ7W7LGgX16cERDwOuB16fmXf0Gtdut3N+fn7ThW7G3NwcU1NTax6b3Hew2Osdvmpvz2X9Xnejdfutf+XuU+xf7P2HT7/nLmWYPffrcZjGtb2g+3t2xaDbsyYb9bldlOgxInoG9aaO+sjMbwFzwKVDqEuS1ECToz4u6nySJiLOBZ4PfK50YZKkZU3+3nwE8Hed/dQPAv4xMz9UtixJ0oomR33cDjx1BLVIkrrwzERJqpxBLUmVM6glqXIGtSRVzqCWpMoZ1JJUOYNakipnUEtS5QxqSaqcQS1JlTOoJalyBrUkVc6glqTKGdSSVDmDWpIqZ1BLUuUMakmqXJNrJj46Ij4ZEYci4s6IuGIUhUmSljW5ZuIp4MrMvDUiHgIsRMSNmXlX4dokSTT4RJ2ZX8/MWzv3vwMcAnaVLkyStCwys/ngiEngJuDJmfntdctmgBmAVqu1Z3Z2dnhVdiweOXH6futcOHpy6C/R0+5dO3suW13XZtftt36/Pvs99yD69TUso5zLcW6vQfosWfewLS0tMTExMe4yilk8cqLnXA4yT9PT0wuZ2e62rHFQR8QE8G/AmzPzuo3GttvtnJ+f33Sh/UzuO3j6/pW7T7F/scmem+E4fNXenstW17XZdfut36/Pfs89iH59Dcso53Kc22uQPkvWPWxzc3NMTU2Nu4xiJvcd7DmXg8xTRPQM6kZHfUTE2cAHgGv6hbQkabiaHPURwDuBQ5n5lvIlSZJWa/KJ+tnAq4DnRsRtnduLCtclSerou8MsMz8FxAhqkSR14ZmJklQ5g1qSKmdQS1LlDGpJqpxBLUmVM6glqXIGtSRVzqCWpMoZ1JJUOYNakipnUEtS5QxqSaqcQS1JlTOoJalyBrUkVc6glqTKGdSSVLkm10x8V0Qci4g7RlGQJGmtJp+o3w1cWrgOSVIPfYM6M28Cjo+gFklSF5GZ/QdFTAIfyswnbzBmBpgBaLVae2ZnZ7dU0OKRE43Gtc6Foye39BJbsnvXzp7Lmta8FaPucxxG2eNG8wj1zmW/usel2/Za6XPQbT1Iz4PMY5O6e83lIDVPT08vZGa727KhBfVq7XY75+fnN1PjaZP7DjYad+XuU+xf7HsR9aE5fNXensua1rwVo+5zHEbZ40bzCPXOZb+6x6Xb9lrpc9BtPUjPg8xjk7p7zeUgNUdEz6D2qA9JqpxBLUmVa3J43vuAm4GLI+LeiHht+bIkSSv67jDLzJePohBJUnfu+pCkyhnUklQ5g1qSKmdQS1LlDGpJqpxBLUmVM6glqXIGtSRVzqCWpMoZ1JJUOYNakipnUEtS5QxqSaqcQS1JlTOoJalyBrUkVc6glqTKNQrqiLg0Ij4fEV+KiH2li5IkPaDJNRN3AG8HXgg8EXh5RDyxdGGSpGVNPlE/HfhSZt6Tmd8HZoFfKVuWJGlFZObGAyJeClyamb/R+flVwM9l5uvWjZsBZjo/Xgx8fvjlrnEh8I3Cr1GDM6HPM6FHsM/tpESPj8nMi7ot6HsVciC6PPZD6Z6ZB4ADmyxsyyJiPjPbo3q9cTkT+jwTegT73E5G3WOTXR/3Ao9e9fOjgPvKlCNJWq9JUP8n8PiIeGxEnANcBnywbFmSpBV9d31k5qmIeB3wUWAH8K7MvLN4Zf2NbDfLmJ0JfZ4JPYJ9bicj7bHvl4mSpPHyzERJqpxBLUmVqy6o+52uHhHPiYhbI+JU5xjv1cv+IiLujIhDEfHXEdHt0MIqNOjz9yLiroi4PSI+ERGPWbXs1RHxxc7t1aOtfHO22mdEXBIRN3fm8/aIeNnoq29ukPnsLH9oRByJiLeNrurNGfA9+5MR8bHO/5t3RcTkKGvfjAH7LJNBmVnNjeUvK+8Gfgo4B/gs8MR1YyaBnwH+HnjpqsefBfx75zl2ADcDU+PuaYA+p4HzOvd/E3h/5/7DgXs6/72gc/+CcfdUoM8nAI/v3H8k8HXgYePuadh9rlr+VuC9wNvG3U+JHoE54AWd+xMr42q7DfieLZZBtX2i7nu6emYezszbgf9bt24CD2Z54/4YcDZwtHzJW9Kkz09m5nc7P97C8vHrAL8E3JiZxzPzm8CNwKUjqnuzttxnZn4hM7/YuX8fcAzoetZWBQaZTyJiD9ACPjaierdiyz12/m2gszLzxs64pVXjajPIXBbLoNqCehfwtVU/39t5rK/MvBn4JMufvL4OfDQzDw29wuHYbJ+vBT68xXXHaZA+T4uIp7P85r97qNUNz5b7jIgHAfuBPyhW3XAMMpdPAL4VEddFxGci4i87/9hbjbbcZ8kManIK+Sg1Ol2964oRjwN+mgd+u90YEc/JzJuGVdwQNe4zIl4JtIFf2Oy6FRikz5XHHwH8A/DqzFz/V1QtBunzt4B/ycyvVfyVCgzW41nAzwNPBb4KvB+4HHjn0Ksc3Jb7LJlBtX2iHuR09V8Fbun8WbXE8m+5Zwy5vmFp1GdEPB94I/CSzPzeZtatxCB9EhEPBQ4Cf5yZtxSudRCD9PlM4HURcRj4K+DXIuKqsuVuyaDv2c90diecAv4ZeFrherdqkD7LZdC4d96v20l/Fstfjj2WB3bkP6nH2Hez9svElwEf7zzH2cAngF8ed09b7ZPlTx930/lCbdXjDwe+zPIXiRd07j983D0V6POczhy+Ydx9lOxz3ZjLqffLxEHmckdn/EWdn/8W+O1x91Sgz2IZNPYN02VDvQj4QmdDvLHz2J+x/JsL4GdZ/q13P/A/wJ2r3gzvAA4BdwFvGXcvA/b5cZa/iLitc/vgqnV/HfhS5/aacfdSok/glcAPVj1+G3DJuPspMZ+rnqPaoB7Ce/YFwO3AIssfss4Zdz8F3rPFMshTyCWpcrXto5YkrWNQS1LlDGpJqpxBLUmVM6glqXIGtSRVzqCWpMr9P0BnsM43Z7TAAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "metrics=(finalTraining.describe())\n",
    "metrics=metrics.transpose()\n",
    "metrics=metrics[:-9]\n",
    "metrics[\"std\"].hist(bins=40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5179, 82)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TEST_DATA=TEST_DATA[finalTraining.columns]\n",
    "TEST_DATA.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Changing from log to lineal TEST_DATA\n",
    "TEST_DATA.iloc[:,0:520] = np.where(TEST_DATA.iloc[:, 0:520] <= 0,\n",
    "                                     TEST_DATA.iloc[:, 0:520] + 105, \n",
    "                                    TEST_DATA.iloc[:, 0:520] - 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "TEST_DATA=TEST_DATA.replace(105,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAP011</th>\n",
       "      <th>WAP012</th>\n",
       "      <th>WAP013</th>\n",
       "      <th>WAP014</th>\n",
       "      <th>WAP029</th>\n",
       "      <th>WAP030</th>\n",
       "      <th>WAP033</th>\n",
       "      <th>WAP034</th>\n",
       "      <th>WAP035</th>\n",
       "      <th>WAP036</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP517</th>\n",
       "      <th>WAP519</th>\n",
       "      <th>WAP520</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>FLOOR</th>\n",
       "      <th>BUILDINGID</th>\n",
       "      <th>USERID</th>\n",
       "      <th>PHONEID</th>\n",
       "      <th>TIMESTAMP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.477273</td>\n",
       "      <td>0.545455</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-85</td>\n",
       "      <td>1385716225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.594595</td>\n",
       "      <td>0.648649</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-85</td>\n",
       "      <td>1385716226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.702703</td>\n",
       "      <td>0.648649</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-85</td>\n",
       "      <td>1385716226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.638889</td>\n",
       "      <td>0.638889</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-85</td>\n",
       "      <td>1385716227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.638889</td>\n",
       "      <td>0.638889</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.916667</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-85</td>\n",
       "      <td>1385716227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5174</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-73</td>\n",
       "      <td>1427796152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5175</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-73</td>\n",
       "      <td>1427796156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5176</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-73</td>\n",
       "      <td>1427796157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5177</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-73</td>\n",
       "      <td>1427796159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5178</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>-73</td>\n",
       "      <td>1427796163</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5179 rows Ã 82 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      WAP011  WAP012  WAP013  WAP014  WAP029    WAP030    WAP033    WAP034  \\\n",
       "0        0.0     0.0     0.0     0.0     0.0  0.363636  0.477273  0.545455   \n",
       "1        0.0     0.0     0.0     0.0     0.0  0.000000  0.594595  0.648649   \n",
       "2        0.0     0.0     0.0     0.0     0.0  0.000000  0.702703  0.648649   \n",
       "3        0.0     0.0     0.0     0.0     0.0  0.000000  0.638889  0.638889   \n",
       "4        0.0     0.0     0.0     0.0     0.0  0.000000  0.638889  0.638889   \n",
       "...      ...     ...     ...     ...     ...       ...       ...       ...   \n",
       "5174     0.0     0.0     0.0     0.0     0.0  0.000000  0.000000  0.000000   \n",
       "5175     0.0     0.0     0.0     0.0     0.0  0.000000  0.000000  0.000000   \n",
       "5176     0.0     0.0     0.0     0.0     0.0  0.000000  0.000000  0.000000   \n",
       "5177     0.0     0.0     0.0     0.0     0.0  0.000000  0.000000  0.000000   \n",
       "5178     0.0     0.0     0.0     0.0     0.0  0.000000  0.000000  0.000000   \n",
       "\n",
       "      WAP035    WAP036  ...  WAP517  WAP519  WAP520  LONGITUDE  LATITUDE  \\\n",
       "0        1.0  0.750000  ...     0.0     0.0     0.0        105       105   \n",
       "1        1.0  1.000000  ...     0.0     0.0     0.0        105       105   \n",
       "2        1.0  1.000000  ...     0.0     0.0     0.0        105       105   \n",
       "3        1.0  1.000000  ...     0.0     0.0     0.0        105       105   \n",
       "4        1.0  0.916667  ...     0.0     0.0     0.0        105       105   \n",
       "...      ...       ...  ...     ...     ...     ...        ...       ...   \n",
       "5174     0.0  0.000000  ...     0.0     0.0     0.0        105       105   \n",
       "5175     0.0  0.000000  ...     0.0     0.0     0.0        105       105   \n",
       "5176     0.0  0.000000  ...     0.0     0.0     0.0        105       105   \n",
       "5177     0.0  0.000000  ...     0.0     0.0     0.0        105       105   \n",
       "5178     0.0  0.000000  ...     0.0     0.0     0.0        105       105   \n",
       "\n",
       "      FLOOR  BUILDINGID  USERID  PHONEID   TIMESTAMP  \n",
       "0       105         105     105      -85  1385716225  \n",
       "1       105         105     105      -85  1385716226  \n",
       "2       105         105     105      -85  1385716226  \n",
       "3       105         105     105      -85  1385716227  \n",
       "4       105         105     105      -85  1385716227  \n",
       "...     ...         ...     ...      ...         ...  \n",
       "5174    105         105     105      -73  1427796152  \n",
       "5175    105         105     105      -73  1427796156  \n",
       "5176    105         105     105      -73  1427796157  \n",
       "5177    105         105     105      -73  1427796159  \n",
       "5178    105         105     105      -73  1427796163  \n",
       "\n",
       "[5179 rows x 82 columns]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stand = MinMaxScaler().fit(TEST_DATA.iloc[:,0:75].transpose())\n",
    "TEST_DATA_STD = stand.transform(TEST_DATA.iloc[:,0:75].transpose())\n",
    "TEST_DATA_STD = pd.DataFrame(np.transpose(TEST_DATA_STD))\n",
    "TEST_DATA[TEST_DATA.columns[0:75]] = TEST_DATA_STD\n",
    "TEST_DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5179, 82)"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TEST_DATA.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20137, 82)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finalTraining.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 0.704576\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.70      0.83      5179\n",
      "           1       0.00      0.00      0.00         0\n",
      "           2       0.00      0.00      0.00         0\n",
      "\n",
      "    accuracy                           0.70      5179\n",
      "   macro avg       0.33      0.23      0.28      5179\n",
      "weighted avg       1.00      0.70      0.83      5179\n",
      "\n",
      "Confusion matrix\n",
      "[[3649    0    0]\n",
      " [1311    0    0]\n",
      " [ 219    0    0]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Respaldo FR\\Anaconda\\lib\\site-packages\\sklearn\\metrics\\classification.py:1439: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "# Predict using the KNN model\n",
    "model = KNeighborsClassifier(n_neighbors = 1)\n",
    "model.fit(X_train, Y_train)\n",
    "prediction= model.predict(X_test)\n",
    "\n",
    "print(\"Accuracy %f\" % (accuracy_score(Y_test, prediction)))\n",
    "print(classification_report(Y_test, prediction))\n",
    "\n",
    "print(\"Confusion matrix\")\n",
    "print(confusion_matrix(prediction, Y_test))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Building\n",
    "X = finalTraining.iloc[:,0:75]\n",
    "y= finalTraining[\"BUILDINGID\"]\n",
    "X_test = TEST_DATA.iloc[:,:-7]\n",
    "Y_test = TEST_DATA[\"BUILDINGID\"]\n",
    "                                         \n",
    "X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, \n",
    "                                                                random_state=1,\n",
    "                                                                shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 0.697046\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.70      0.82      5179\n",
      "           1       0.00      0.00      0.00         0\n",
      "           2       0.00      0.00      0.00         0\n",
      "\n",
      "    accuracy                           0.70      5179\n",
      "   macro avg       0.33      0.23      0.27      5179\n",
      "weighted avg       1.00      0.70      0.82      5179\n",
      "\n",
      "Confusion matrix\n",
      "[[3610    0    0]\n",
      " [1364    0    0]\n",
      " [ 205    0    0]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Respaldo FR\\Anaconda\\lib\\site-packages\\sklearn\\metrics\\classification.py:1439: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples.\n",
      "  'recall', 'true', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "model= LogisticRegression(solver='liblinear', multi_class='ovr')\n",
    "model.fit(X_train, Y_train)\n",
    "predictionbuilding=model.predict(X_test)\n",
    "\n",
    "print(\"Accuracy %f\" % (accuracy_score(Y_test, predictionbuilding)))\n",
    "print(classification_report(Y_test, predictionbuilding))\n",
    "\n",
    "print(\"Confusion matrix\")\n",
    "print(confusion_matrix(predictionbuilding, Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       0\n",
       "1       0\n",
       "2       0\n",
       "3       0\n",
       "4       0\n",
       "       ..\n",
       "1106    0\n",
       "1107    0\n",
       "1108    0\n",
       "1109    0\n",
       "1110    0\n",
       "Name: BUILDINGID, Length: 1101, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "errors_building=(validationData.BUILDINGID-predictionbuilding)\n",
    "errors_building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Floor\n",
    "X = finalTraining.iloc[:,:-9]\n",
    "y= finalTraining[\"FLOOR\"]\n",
    "X_test = validationData.iloc[:,:-9]\n",
    "Y_test = validationData[\"FLOOR\"]\n",
    "                                         \n",
    "X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, \n",
    "                                                                random_state=1,\n",
    "                                                                shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 0.901907\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.14      0.58      0.23       130\n",
      "           1       0.46      0.31      0.37       460\n",
      "           2       0.20      0.17      0.18       303\n",
      "           3       0.00      0.00      0.00       169\n",
      "           4       0.00      0.00      0.00        39\n",
      "\n",
      "    accuracy                           0.24      1101\n",
      "   macro avg       0.16      0.21      0.16      1101\n",
      "weighted avg       0.26      0.24      0.23      1101\n",
      "\n",
      "Confusion matrix\n",
      "[[119  32   1   0   1]\n",
      " [  8 398   7   0   0]\n",
      " [  3  30 283   8   0]\n",
      " [  0   0  10 158   3]\n",
      " [  0   0   2   3  35]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Respaldo FR\\Anaconda\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "model= LogisticRegression(solver='liblinear', multi_class='ovr')\n",
    "model.fit(X_train, Y_train)\n",
    "predictionfloor=model.predict(X_test)\n",
    "\n",
    "print(\"Accuracy %f\" % (accuracy_score(Y_test, predictionfloor)))\n",
    "print(classification_report(Y_test, predictionbuilding))\n",
    "\n",
    "print(\"Confusion matrix\")\n",
    "print(confusion_matrix(predictionfloor, Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1101,)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictionfloor.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "#LONG\n",
    "X = finalTraining.iloc[:,:-9]\n",
    "y= finalTraining[\"LONGITUDE\"]\n",
    "X_test = validationData.iloc[:,:-9]\n",
    "Y_test = validationData[\"LONGITUDE\"]\n",
    "                                         \n",
    "X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, \n",
    "                                                                random_state=1,\n",
    "                                                                shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN RMSE = 11.385426\n"
     ]
    }
   ],
   "source": [
    "model=KNeighborsRegressor(n_neighbors=1)\n",
    "model.fit(X_train,Y_train)\n",
    "longitude_predictions=model.predict(X_test)\n",
    "longitude_predictions\n",
    "\n",
    "print(\"KNN RMSE = %f\" % (sqrt(mean_squared_error(Y_test, longitude_predictions))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "#PCA for LONG  and using Building as feature\n",
    "X = finalTraining.iloc[:,:-9]\n",
    "pca = PCA(0.999)\n",
    "pca.fit(finalTraining.iloc[:,:-9])\n",
    "pcX = pd.DataFrame(pca.transform(X))\n",
    "y = finalTraining[\"BUILDINGID\"]\n",
    "vx = validationData.iloc[:,:-9] \n",
    "pcvx = pd.DataFrame(pca.transform(vx))\n",
    "vy = validationData[\"BUILDINGID\"]\n",
    "                                         \n",
    "X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, \n",
    "                                                                random_state=1,\n",
    "                                                                shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Features\n",
    "X2 = pcX.copy()\n",
    "X2[\"BUILDINGID\"] = trainingData[\"BUILDINGID\"]\n",
    "dummy = pd.get_dummies(X2['BUILDINGID'])\n",
    "X2 = pd.concat([X2, dummy], axis=1)\n",
    "del X2['BUILDINGID']\n",
    "y2 = trainingData[\"LONGITUDE\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Testing\n",
    "vx2 = pcvx.copy()\n",
    "vx2[\"BUILDINGID\"] = predictionbuilding\n",
    "dummytest = pd.get_dummies(vx2['BUILDINGID'])\n",
    "vx2 = pd.concat([vx2,dummytest], axis = 1)\n",
    "del vx2['BUILDINGID']\n",
    "vy2 = validationData[\"LONGITUDE\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN-Longitude RMSE = 10.816466\n"
     ]
    }
   ],
   "source": [
    "#Modeling\n",
    "model=KNeighborsRegressor(n_neighbors=2)\n",
    "model.fit(X2,y2)\n",
    "predictions_Longitude=model.predict(vx2)\n",
    "\n",
    "print(\"KNN-Longitude RMSE = %f\" % (sqrt(mean_squared_error(vy2, predictions_Longitude))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN-LATITUDE RMSE = 8.236259\n"
     ]
    }
   ],
   "source": [
    "#Modeling\n",
    "model=KNeighborsRegressor(n_neighbors=3)\n",
    "model.fit(X2,y2)\n",
    "predictions_Longitude=model.predict(vx2)\n",
    "\n",
    "print(\"KNN-Longitude RMSE = %f\" % (sqrt(mean_squared_error(vy2, predictions_Longitude))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Latitude\n",
    "X = finalTraining.iloc[:,:-9]\n",
    "y= finalTraining[\"LATITUDE\"]\n",
    "X_test = validationData.iloc[:,:-9]\n",
    "Y_test = validationData[\"LATITUDE\"]\n",
    "                                         \n",
    "X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, \n",
    "                                                                random_state=1,\n",
    "                                                                shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN LAT RMSE = 8.213062\n"
     ]
    }
   ],
   "source": [
    "model=KNeighborsRegressor(n_neighbors=3)\n",
    "model.fit(X_train,Y_train)\n",
    "lat_predictions=model.predict(X_test)\n",
    "lat_predictions\n",
    "\n",
    "print(\"KNN LAT RMSE = %f\" % (sqrt(mean_squared_error(Y_test, lat_predictions))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "#PCA for LAT and using Building as feature\n",
    "X = finalTraining.iloc[:,:-9]\n",
    "pca = PCA(0.999)\n",
    "pca.fit(finalTraining.iloc[:,:-9])\n",
    "pcX = pd.DataFrame(pca.transform(X))\n",
    "y = finalTraining[\"BUILDINGID\"]\n",
    "vx = validationData.iloc[:,:-9] \n",
    "pcvx = pd.DataFrame(pca.transform(vx))\n",
    "vy = validationData[\"BUILDINGID\"]\n",
    "                                         \n",
    "X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, \n",
    "                                                                random_state=1,\n",
    "                                                                shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Features LAT\n",
    "X2 = pcX.copy()\n",
    "X2[\"BUILDINGID\"] = trainingData[\"BUILDINGID\"]\n",
    "dummy = pd.get_dummies(X2['BUILDINGID'])\n",
    "X2 = pd.concat([X2, dummy], axis=1)\n",
    "del X2['BUILDINGID']\n",
    "y2 = trainingData[\"LATITUDE\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Testing\n",
    "vx2 = pcvx.copy()\n",
    "vx2[\"BUILDINGID\"] = predictionbuilding\n",
    "dummytest = pd.get_dummies(vx2['BUILDINGID'])\n",
    "vx2 = pd.concat([vx2,dummytest], axis = 1)\n",
    "del vx2['BUILDINGID']\n",
    "vy2 = validationData[\"LATITUDE\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN-LATITUDE RMSE = 8.236259\n"
     ]
    }
   ],
   "source": [
    "#Modeling\n",
    "model=KNeighborsRegressor(n_neighbors=3)\n",
    "model.fit(X2,y2)\n",
    "predictions_Latitude=model.predict(vx2)\n",
    "\n",
    "print(\"KNN-LATITUDE RMSE = %f\" % (sqrt(mean_squared_error(vy2, predictions_Latitude))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1101,)"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions_Latitude.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4864825.51277391, 4864839.43816667, 4864847.7535    , ...,\n",
       "       4864904.83426667, 4864910.49196666, 4864907.96143333])"
      ]
     },
     "execution_count": 253,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lat_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1101,)"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictionfloor.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1101,)"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions_Longitude.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictionbuilding.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.concat([trainingData_val, validationData_val], axis=0)\n",
    "df=df.reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21048, 530)"
      ]
     },
     "execution_count": 268,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4864825.51277391, 4864839.43816667, 4864847.7535    , ...,\n",
       "       4864904.83426667, 4864910.49196666, 4864907.96143333])"
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lat_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "F=pd.DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>WAP001</th>\n",
       "      <th>WAP002</th>\n",
       "      <th>WAP003</th>\n",
       "      <th>WAP004</th>\n",
       "      <th>WAP005</th>\n",
       "      <th>WAP006</th>\n",
       "      <th>WAP007</th>\n",
       "      <th>WAP008</th>\n",
       "      <th>WAP009</th>\n",
       "      <th>...</th>\n",
       "      <th>WAP520</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>FLOOR</th>\n",
       "      <th>BUILDINGID</th>\n",
       "      <th>SPACEID</th>\n",
       "      <th>RELATIVEPOSITION</th>\n",
       "      <th>USERID</th>\n",
       "      <th>PHONEID</th>\n",
       "      <th>TIMESTAMP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7541.264300</td>\n",
       "      <td>4.864921e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7536.621200</td>\n",
       "      <td>4.864934e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>106</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>-97</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7519.152400</td>\n",
       "      <td>4.864950e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371714095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7524.570400</td>\n",
       "      <td>4.864934e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>102</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>1371713807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7632.143600</td>\n",
       "      <td>4.864982e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>122</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>1369909710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21043</td>\n",
       "      <td>1106</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7317.344231</td>\n",
       "      <td>4.864796e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381156711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21044</td>\n",
       "      <td>1107</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7313.731120</td>\n",
       "      <td>4.864792e+06</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381156730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21045</td>\n",
       "      <td>1108</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7637.535798</td>\n",
       "      <td>4.864903e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381247781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21046</td>\n",
       "      <td>1109</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7636.654005</td>\n",
       "      <td>4.864905e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381247807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21047</td>\n",
       "      <td>1110</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>...</td>\n",
       "      <td>100</td>\n",
       "      <td>-7637.944120</td>\n",
       "      <td>4.864904e+06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1381247836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>21048 rows Ã 530 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index  WAP001  WAP002  WAP003  WAP004  WAP005  WAP006  WAP007  WAP008  \\\n",
       "0          0     100     100     100     100     100     100     100     100   \n",
       "1          1     100     100     100     100     100     100     100     100   \n",
       "2          2     100     100     100     100     100     100     100     -97   \n",
       "3          3     100     100     100     100     100     100     100     100   \n",
       "4          4     100     100     100     100     100     100     100     100   \n",
       "...      ...     ...     ...     ...     ...     ...     ...     ...     ...   \n",
       "21043   1106     100     100     100     100     100     100     100     100   \n",
       "21044   1107     100     100     100     100     100     100     100     100   \n",
       "21045   1108     100     100     100     100     100     100     100     100   \n",
       "21046   1109     100     100     100     100     100     100     100     100   \n",
       "21047   1110     100     100     100     100     100     100     100     100   \n",
       "\n",
       "       WAP009  ...  WAP520    LONGITUDE      LATITUDE  FLOOR  BUILDINGID  \\\n",
       "0         100  ...     100 -7541.264300  4.864921e+06      2           1   \n",
       "1         100  ...     100 -7536.621200  4.864934e+06      2           1   \n",
       "2         100  ...     100 -7519.152400  4.864950e+06      2           1   \n",
       "3         100  ...     100 -7524.570400  4.864934e+06      2           1   \n",
       "4         100  ...     100 -7632.143600  4.864982e+06      0           0   \n",
       "...       ...  ...     ...          ...           ...    ...         ...   \n",
       "21043     100  ...     100 -7317.344231  4.864796e+06      3           2   \n",
       "21044     100  ...     100 -7313.731120  4.864792e+06      3           2   \n",
       "21045     100  ...     100 -7637.535798  4.864903e+06      0           0   \n",
       "21046     100  ...     100 -7636.654005  4.864905e+06      0           0   \n",
       "21047     100  ...     100 -7637.944120  4.864904e+06      0           0   \n",
       "\n",
       "       SPACEID  RELATIVEPOSITION  USERID  PHONEID   TIMESTAMP  \n",
       "0          106                 2       2       23  1371713733  \n",
       "1          106                 2       2       23  1371713691  \n",
       "2          103                 2       2       23  1371714095  \n",
       "3          102                 2       2       23  1371713807  \n",
       "4          122                 2      11       13  1369909710  \n",
       "...        ...               ...     ...      ...         ...  \n",
       "21043        0                 0       0       13  1381156711  \n",
       "21044        0                 0       0       13  1381156730  \n",
       "21045        0                 0       0       13  1381247781  \n",
       "21046        0                 0       0       13  1381247807  \n",
       "21047        0                 0       0       13  1381247836  \n",
       "\n",
       "[21048 rows x 530 columns]"
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictionbuilding_val=pd.DataFrame(predictionbuilding)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "lat_predictions_val=pd.DataFrame(lat_predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions_Longitude_val=pd.DataFrame(predictions_Longitude)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictionfloor_val=pd.DataFrame(predictionfloor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub=pd.concat([predictionbuilding_val, lat_predictions_val,predictions_Longitude_val,predictionfloor_val], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub.columns=[\"BUILDINGID\",\"LATITUDE\",\"LONGITUDE\",\"FLOOR\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BUILDINGID</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>FLOOR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.864826e+06</td>\n",
       "      <td>-7313.065521</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4.864839e+06</td>\n",
       "      <td>-7385.526400</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4.864848e+06</td>\n",
       "      <td>-7370.010700</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4.864848e+06</td>\n",
       "      <td>-7368.053300</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4.864922e+06</td>\n",
       "      <td>-7640.510400</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1096</td>\n",
       "      <td>2</td>\n",
       "      <td>4.864792e+06</td>\n",
       "      <td>-7316.457400</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1097</td>\n",
       "      <td>2</td>\n",
       "      <td>4.864792e+06</td>\n",
       "      <td>-7327.305450</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1098</td>\n",
       "      <td>0</td>\n",
       "      <td>4.864905e+06</td>\n",
       "      <td>-7639.649500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1099</td>\n",
       "      <td>0</td>\n",
       "      <td>4.864910e+06</td>\n",
       "      <td>-7639.649500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1100</td>\n",
       "      <td>0</td>\n",
       "      <td>4.864908e+06</td>\n",
       "      <td>-7639.392850</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1101 rows Ã 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      BUILDINGID      LATITUDE    LONGITUDE  FLOOR\n",
       "0              1  4.864826e+06 -7313.065521      0\n",
       "1              2  4.864839e+06 -7385.526400      4\n",
       "2              2  4.864848e+06 -7370.010700      4\n",
       "3              2  4.864848e+06 -7368.053300      4\n",
       "4              0  4.864922e+06 -7640.510400      2\n",
       "...          ...           ...          ...    ...\n",
       "1096           2  4.864792e+06 -7316.457400      3\n",
       "1097           2  4.864792e+06 -7327.305450      3\n",
       "1098           0  4.864905e+06 -7639.649500      0\n",
       "1099           0  4.864910e+06 -7639.649500      0\n",
       "1100           0  4.864908e+06 -7639.392850      0\n",
       "\n",
       "[1101 rows x 4 columns]"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
